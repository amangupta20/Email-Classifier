# =============================================================================
# Intelligent Inbox Email Classification - Environment Configuration
# =============================================================================
# Copy this file to .env and update the values with your actual configuration
# Reference: specs/001-i-am-building/quickstart.md

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL database connection string
DB_URL=postgresql://classifier:password@localhost:5432/email_classifier

# Alternative: Use individual database parameters (overrides DB_URL if set)
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=email_classifier
# DB_USER=classifier
# DB_PASSWORD=password

# =============================================================================
# LLM (OLLAMA) CONFIGURATION
# =============================================================================
# Ollama server endpoint for local LLM inference
OLLAMA_HOST=http://localhost:11434

# Model configuration
QWEN_MODEL_NAME=qwen3:8b
LLM_TEMPERATURE=0.1
LLM_MAX_TOKENS=4000

# =============================================================================
# VECTOR DATABASE CONFIGURATION
# =============================================================================
# Primary: Qdrant vector database for RAG
QDRANT_HOST=localhost
QDRANT_PORT=6333

# Alternative: Supabase (self-hosted) with pgvector
# SUPABASE_URL=http://localhost:8000
# SUPABASE_KEY=your-anon-key

# =============================================================================
# EMAIL (IMAP) CONFIGURATION
# =============================================================================
# IMAP server settings for email polling
IMAP_SERVER=imap.gmail.com
IMAP_USERNAME=your-email@gmail.com
IMAP_PASSWORD=app-password  # Use app-specific password for Gmail
IMAP_FOLDER=INBOX

# =============================================================================
# DASHBOARD CONFIGURATION
# =============================================================================
# FastAPI dashboard server settings
DASHBOARD_PORT=8080
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=secret

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================
# Grafana admin password for monitoring dashboard
GRAFANA_PASSWORD=grafana123

# Prometheus metrics configuration
PROMETHEUS_PORT=9090
METRICS_ENABLED=true

# =============================================================================
# N8N CONFIGURATION (V1 WORKFLOWS)
# =============================================================================
# n8n workflow automation server (V1 prototype)
N8N_HOST=host.docker.internal:5678
N8N_USERNAME=admin
N8N_PASSWORD=n8n-password

# =============================================================================
# FEATURE FLAGS
# =============================================================================
# Core feature toggles
RAG_ENABLED=true
STORE_RAW_EMAILS=false  # Privacy: don't store email bodies by default
RETENTION_DAYS=90

# =============================================================================
# PERFORMANCE SETTINGS
# =============================================================================
# Email polling and processing
EMAIL_POLL_INTERVAL=30  # Seconds between email scans
CLASSIFY_CONCURRENCY=2   # Max parallel classification jobs

# RAG (Retrieval-Augmented Generation) settings
RAG_TOP_K=5              # Number of context chunks to retrieve
RAG_SIMILARITY_THRESHOLD=0.6  # Minimum similarity for RAG matches
RAG_REINDEX_CRON="0 2 * * 0"  # Weekly reindexing (Sundays 2AM)

# =============================================================================
# SECURITY SETTINGS
# =============================================================================
# Encryption for sensitive data (generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key())")
ENCRYPTION_KEY=your-32-byte-key-here

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Logging level and output
LOG_LEVEL=INFO
LOG_FORMAT=json

# =============================================================================
# DEVELOPMENT & TESTING
# =============================================================================
# Development mode settings
DEBUG=false
TEST_MODE=false

# =============================================================================
# GMAIL API INTEGRATION (Optional)
# =============================================================================
# Gmail API for label application (requires OAuth2 setup)
# GMAIL_CREDENTIALS_FILE=path/to/credentials.json
# GMAIL_TOKEN_FILE=path/to/token.json
# GMAIL_LABEL_PREFIX=EmailClassifier

# =============================================================================
# ADVANCED CONFIGURATION
# =============================================================================
# Queue management
QUEUE_MAX_SIZE=1000
QUEUE_RETRY_ATTEMPTS=5
QUEUE_RETRY_DELAY=60  # Seconds

# Circuit breaker settings
CIRCUIT_BREAKER_THRESHOLD=5
CIRCUIT_BREAKER_TIMEOUT=60  # Seconds

# =============================================================================
# DOCKER COMPOSE OVERRIDES
# =============================================================================
# Uncomment and adjust for Docker Compose deployment
# COMPOSE_PROJECT_NAME=email-classifier
# COMPOSE_FILE=docker-compose.yml:docker-compose.override.yml