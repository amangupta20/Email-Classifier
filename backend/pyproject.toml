[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "email-classifier"
version = "0.1.0"
description = "Intelligent Inbox Email Classification System"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Email Classifier Team", email = "team@email-classifier.com"},
]
maintainers = [
    {name = "Email Classifier Team", email = "team@email-classifier.com"},
]
keywords = ["email", "classification", "machine-learning", "fastapi", "react"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Email",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-decouple>=3.8",
    "celery>=5.3.4",
    "redis>=5.0.1",
    "httpx>=0.25.2",
    "openai>=1.3.0",
    "anthropic>=0.7.8",
    "scikit-learn>=1.3.2",
    "pandas>=2.1.4",
    "numpy>=1.26.2",
    "pytest>=7.4.4",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.12.1",
    "isort>=5.13.2",
    "ruff>=0.1.9",
]

[project.urls]
Homepage = "https://github.com/your-org/email-classifier"
Repository = "https://github.com/your-org/email-classifier"
Documentation = "https://email-classifier.readthedocs.io/"
Issues = "https://github.com/your-org/email-classifier/issues"
Changelog = "https://github.com/your-org/email-classifier/blob/main/CHANGELOG.md"

[project.scripts]
email-classifier = "email_classifier.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["email_classifier*"]

[tool.setuptools.package-data]
"email_classifier" = ["*.txt", "*.md"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "S101"]

[tool.ruff.isort]
known-first-party = ["email_classifier"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "passlib.*",
    "alembic.*",
    "celery.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=email_classifier",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "asyncio: Async tests",
]

[tool.coverage.run]
source = ["backend/email_classifier"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "backend/email_classifier/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]