"""Initial migration for data model entities

Revision ID: a0c0f47850f1
Revises: 
Create Date: 2025-10-04 19:52:56.822375

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a0c0f47850f1'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('config',
    sa.Column('key', sa.TEXT(), nullable=False),
    sa.Column('value', sa.TEXT(), nullable=False),
    sa.Column('value_type', sa.TEXT(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("value_type IN ('string', 'int', 'float', 'bool')", name='chk_value_type'),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_table('cycles',
    sa.Column('cycle_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('start_timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('emails_scanned', sa.INTEGER(), nullable=False),
    sa.Column('emails_classified', sa.INTEGER(), nullable=False),
    sa.Column('emails_failed', sa.INTEGER(), nullable=False),
    sa.Column('queue_depth_start', sa.INTEGER(), nullable=False),
    sa.Column('queue_depth_end', sa.INTEGER(), nullable=False),
    sa.Column('duration_ms', sa.INTEGER(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('cycle_id')
    )
    op.create_index('idx_cycles_start', 'cycles', ['start_timestamp'], unique=False)
    op.create_table('emails',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('message_id', sa.TEXT(), nullable=False),
    sa.Column('sender', sa.TEXT(), nullable=False),
    sa.Column('sender_domain', sa.TEXT(), server_default=sa.text("split_part(sender, '@', 2)"), nullable=False),
    sa.Column('subject', sa.TEXT(), nullable=False),
    sa.Column('received_timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('body_hash', sa.TEXT(), nullable=False),
    sa.Column('body_encrypted', sa.LargeBinary(), nullable=True),
    sa.Column('classification_status', sa.Enum('PENDING', 'CLASSIFYING', 'CLASSIFIED', 'FAILED', 'QUARANTINED', name='email_status'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.FetchedValue(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('message_id')
    )
    op.create_index('idx_emails_message_id', 'emails', ['message_id'], unique=False)
    op.create_index('idx_emails_pending', 'emails', ['classification_status'], unique=False, postgresql_where=sa.text("classification_status = 'pending'"))
    op.create_index('idx_emails_received', 'emails', ['received_timestamp'], unique=False)
    op.create_index('idx_emails_sender_domain', 'emails', ['sender_domain'], unique=False)
    op.create_index('idx_emails_status', 'emails', ['classification_status'], unique=False)
    op.create_table('health_checks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('component_name', sa.TEXT(), nullable=False),
    sa.Column('status', sa.Enum('HEALTHY', 'DEGRADED', 'DOWN', name='health_status'), nullable=False),
    sa.Column('last_check_timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_health_component_time', 'health_checks', ['component_name', 'last_check_timestamp'], unique=False)
    op.create_table('metrics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('metric_name', sa.TEXT(), nullable=False),
    sa.Column('value', sa.NUMERIC(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('aggregation_period', sa.TEXT(), nullable=False),
    sa.Column('unit', sa.TEXT(), nullable=True),
    sa.Column('labels', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("aggregation_period IN ('5s', '1m', '1h', '1d')", name='chk_aggregation_period'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_metrics_labels', 'metrics', ['labels'], unique=False, postgresql_using='gin')
    op.create_index('idx_metrics_name_time', 'metrics', ['metric_name', 'timestamp'], unique=False)
    op.create_table('tags',
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=False),
    sa.Column('category_type', sa.Enum('ACADEMIC', 'CAREER', 'ADMIN', 'CLUBS', 'SPORTS', 'CULTURAL', 'ACTION', 'FINANCE', 'PERSONAL', 'LEARNING', 'PROMOTION', 'SYSTEM', 'SPAM', name='category_type'), nullable=False),
    sa.Column('active', sa.BOOLEAN(), nullable=False),
    sa.Column('priority_order', sa.INTEGER(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_index('idx_tags_active', 'tags', ['active'], unique=False, postgresql_where=sa.text('active = true'))
    op.create_index('idx_tags_type', 'tags', ['category_type'], unique=False)
    op.create_table('classifications',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('email_id', sa.UUID(), nullable=False),
    sa.Column('primary_category', sa.TEXT(), nullable=False),
    sa.Column('secondary_categories', sa.ARRAY(sa.TEXT()), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='priority'), nullable=False),
    sa.Column('deadline_utc', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deadline_confidence', sa.Enum('EXTRACTED', 'INFERRED', 'NONE', name='deadline_confidence'), nullable=False),
    sa.Column('confidence', sa.NUMERIC(precision=3, scale=2), nullable=False),
    sa.Column('rationale', sa.TEXT(), nullable=True),
    sa.Column('detected_entities', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('sentiment', sa.Enum('POSITIVE', 'NEUTRAL', 'NEGATIVE', 'URGENT', name='sentiment'), nullable=False),
    sa.Column('action_items', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('thread_context', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('rag_context_used', sa.ARRAY(sa.TEXT()), nullable=False),
    sa.Column('suggested_folder', sa.TEXT(), nullable=True),
    sa.Column('schema_version', sa.TEXT(), nullable=False),
    sa.Column('processed_timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint('array_length(secondary_categories, 1) <= 3', name='chk_secondary_categories'),
    sa.CheckConstraint('confidence >= 0 AND confidence <= 1', name='chk_confidence_range'),
    sa.CheckConstraint('jsonb_array_length(action_items) <= 10', name='chk_action_items'),
    sa.CheckConstraint('length(rationale) <= 200', name='chk_rationale_length'),
    sa.ForeignKeyConstraint(['email_id'], ['emails.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email_id')
    )
    op.create_index('idx_classifications_actions', 'classifications', ['action_items'], unique=False, postgresql_using='gin')
    op.create_index('idx_classifications_category', 'classifications', ['primary_category'], unique=False)
    op.create_index('idx_classifications_confidence', 'classifications', ['confidence'], unique=False)
    op.create_index('idx_classifications_email', 'classifications', ['email_id'], unique=False)
    op.create_index('idx_classifications_entities', 'classifications', ['detected_entities'], unique=False, postgresql_using='gin')
    op.create_index('idx_classifications_processed', 'classifications', ['processed_timestamp'], unique=False)
    op.create_table('feedback',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('email_id', sa.UUID(), nullable=False),
    sa.Column('original_category', sa.TEXT(), nullable=False),
    sa.Column('corrected_category', sa.TEXT(), nullable=False),
    sa.Column('reason', sa.TEXT(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('incorporated', sa.BOOLEAN(), nullable=False),
    sa.ForeignKeyConstraint(['email_id'], ['emails.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_feedback_email', 'feedback', ['email_id'], unique=False)
    op.create_index('idx_feedback_pending', 'feedback', ['incorporated'], unique=False, postgresql_where=sa.text('incorporated = false'))
    op.create_index('idx_feedback_timestamp', 'feedback', ['timestamp'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_feedback_timestamp', table_name='feedback')
    op.drop_index('idx_feedback_pending', table_name='feedback', postgresql_where=sa.text('incorporated = false'))
    op.drop_index('idx_feedback_email', table_name='feedback')
    op.drop_table('feedback')
    op.drop_index('idx_classifications_processed', table_name='classifications')
    op.drop_index('idx_classifications_entities', table_name='classifications', postgresql_using='gin')
    op.drop_index('idx_classifications_email', table_name='classifications')
    op.drop_index('idx_classifications_confidence', table_name='classifications')
    op.drop_index('idx_classifications_category', table_name='classifications')
    op.drop_index('idx_classifications_actions', table_name='classifications', postgresql_using='gin')
    op.drop_table('classifications')
    op.drop_index('idx_tags_type', table_name='tags')
    op.drop_index('idx_tags_active', table_name='tags', postgresql_where=sa.text('active = true'))
    op.drop_table('tags')
    op.drop_index('idx_metrics_name_time', table_name='metrics')
    op.drop_index('idx_metrics_labels', table_name='metrics', postgresql_using='gin')
    op.drop_table('metrics')
    op.drop_index('idx_health_component_time', table_name='health_checks')
    op.drop_table('health_checks')
    op.drop_index('idx_emails_status', table_name='emails')
    op.drop_index('idx_emails_sender_domain', table_name='emails')
    op.drop_index('idx_emails_received', table_name='emails')
    op.drop_index('idx_emails_pending', table_name='emails', postgresql_where=sa.text("classification_status = 'pending'"))
    op.drop_index('idx_emails_message_id', table_name='emails')
    op.drop_table('emails')
    op.drop_index('idx_cycles_start', table_name='cycles')
    op.drop_table('cycles')
    op.drop_table('config')
    # ### end Alembic commands ###
